// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces/interfaces.go

// Package mock_interfaces is a generated GoMock package.
package mock_interfaces

import (
	reflect "reflect"

	interfaces "github.com/BlenderistDev/automation/interfaces"
	gomock "github.com/golang/mock/gomock"
)

// MockTriggerEvent is a mock of TriggerEvent interface.
type MockTriggerEvent struct {
	ctrl     *gomock.Controller
	recorder *MockTriggerEventMockRecorder
}

// MockTriggerEventMockRecorder is the mock recorder for MockTriggerEvent.
type MockTriggerEventMockRecorder struct {
	mock *MockTriggerEvent
}

// NewMockTriggerEvent creates a new mock instance.
func NewMockTriggerEvent(ctrl *gomock.Controller) *MockTriggerEvent {
	mock := &MockTriggerEvent{ctrl: ctrl}
	mock.recorder = &MockTriggerEventMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTriggerEvent) EXPECT() *MockTriggerEventMockRecorder {
	return m.recorder
}

// GetData mocks base method.
func (m *MockTriggerEvent) GetData() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetData")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// GetData indicates an expected call of GetData.
func (mr *MockTriggerEventMockRecorder) GetData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetData", reflect.TypeOf((*MockTriggerEvent)(nil).GetData))
}

// GetName mocks base method.
func (m *MockTriggerEvent) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName.
func (mr *MockTriggerEventMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockTriggerEvent)(nil).GetName))
}

// MockCondition is a mock of Condition interface.
type MockCondition struct {
	ctrl     *gomock.Controller
	recorder *MockConditionMockRecorder
}

// MockConditionMockRecorder is the mock recorder for MockCondition.
type MockConditionMockRecorder struct {
	mock *MockCondition
}

// NewMockCondition creates a new mock instance.
func NewMockCondition(ctrl *gomock.Controller) *MockCondition {
	mock := &MockCondition{ctrl: ctrl}
	mock.recorder = &MockConditionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCondition) EXPECT() *MockConditionMockRecorder {
	return m.recorder
}

// Check mocks base method.
func (m *MockCondition) Check(trigger interfaces.TriggerEvent) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check", trigger)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Check indicates an expected call of Check.
func (mr *MockConditionMockRecorder) Check(trigger interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockCondition)(nil).Check), trigger)
}

// MockAction is a mock of Action interface.
type MockAction struct {
	ctrl     *gomock.Controller
	recorder *MockActionMockRecorder
}

// MockActionMockRecorder is the mock recorder for MockAction.
type MockActionMockRecorder struct {
	mock *MockAction
}

// NewMockAction creates a new mock instance.
func NewMockAction(ctrl *gomock.Controller) *MockAction {
	mock := &MockAction{ctrl: ctrl}
	mock.recorder = &MockActionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAction) EXPECT() *MockActionMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockAction) Execute(trigger interfaces.TriggerEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", trigger)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockActionMockRecorder) Execute(trigger interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockAction)(nil).Execute), trigger)
}

// MockAutomation is a mock of Automation interface.
type MockAutomation struct {
	ctrl     *gomock.Controller
	recorder *MockAutomationMockRecorder
}

// MockAutomationMockRecorder is the mock recorder for MockAutomation.
type MockAutomationMockRecorder struct {
	mock *MockAutomation
}

// NewMockAutomation creates a new mock instance.
func NewMockAutomation(ctrl *gomock.Controller) *MockAutomation {
	mock := &MockAutomation{ctrl: ctrl}
	mock.recorder = &MockAutomationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAutomation) EXPECT() *MockAutomationMockRecorder {
	return m.recorder
}

// AddAction mocks base method.
func (m *MockAutomation) AddAction(action interfaces.Action) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddAction", action)
}

// AddAction indicates an expected call of AddAction.
func (mr *MockAutomationMockRecorder) AddAction(action interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAction", reflect.TypeOf((*MockAutomation)(nil).AddAction), action)
}

// AddCondition mocks base method.
func (m *MockAutomation) AddCondition(condition interfaces.Condition) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddCondition", condition)
}

// AddCondition indicates an expected call of AddCondition.
func (mr *MockAutomationMockRecorder) AddCondition(condition interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCondition", reflect.TypeOf((*MockAutomation)(nil).AddCondition), condition)
}

// AddTrigger mocks base method.
func (m *MockAutomation) AddTrigger(trigger string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddTrigger", trigger)
}

// AddTrigger indicates an expected call of AddTrigger.
func (mr *MockAutomationMockRecorder) AddTrigger(trigger interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTrigger", reflect.TypeOf((*MockAutomation)(nil).AddTrigger), trigger)
}

// Execute mocks base method.
func (m *MockAutomation) Execute(trigger interfaces.TriggerEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", trigger)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockAutomationMockRecorder) Execute(trigger interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockAutomation)(nil).Execute), trigger)
}

// GetTriggers mocks base method.
func (m *MockAutomation) GetTriggers() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTriggers")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetTriggers indicates an expected call of GetTriggers.
func (mr *MockAutomationMockRecorder) GetTriggers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTriggers", reflect.TypeOf((*MockAutomation)(nil).GetTriggers))
}
